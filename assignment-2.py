import numpy as np

# Task 1: Creating Arrays

arr1 = np.arange(1, 11)
print(arr1)
# [ 1  2  3  4  5  6  7  8  9 10]

arr2 = np.arange(1, 10).reshape(3, 3)
print(arr2)
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

arr3 = np.random.rand(3, 5, 3)
print(arr3)
# [[[0.25340296 0.20731301 0.28662099]
#   [0.38092702 0.64789009 0.70726134]
#   [0.44442426 0.0611743  0.15017095]
#   [0.76708526 0.27713018 0.010562  ]
#   [0.05398805 0.43811343 0.07984921]]

#  [[0.57149555 0.81273023 0.46164673]
#   [0.39340336 0.58999494 0.62282684]
#   [0.0955621  0.92561841 0.44072698]
#   [0.94755636 0.49950257 0.48242074]
#   [0.60549193 0.47756241 0.68663857]]

#  [[0.93403066 0.54677359 0.91920821]
#   [0.97268901 0.06791601 0.5248901 ]
#   [0.25593042 0.01183331 0.08666178]
#   [0.445873   0.32038189 0.84783328]
#   [0.02249123 0.8235645  0.28874149]]]


print(arr1.shape, arr1.size, arr1.dtype)
# (10,) 10 int64
print(arr2.shape, arr2.size, arr2.dtype)
# (3, 3) 9 int64
print(arr3.shape, arr3.size, arr3.dtype)
# (3, 5, 3) 45 float64

# Task 2: Indexing and Slicing

data = [10, 20, 30, 40, 50, 60, 70, 80, 90]
arr = np.array(data)
print(arr, type(arr))
# [10 20 30 40 50 60 70 80 90] <class 'numpy.ndarray'>

print(arr[:3])
# [10 20 30]

print(arr[::2])
# [10 30 50 70 90]

print(arr[::-1])
# [90 80 70 60 50 40 30 20 10]

# Task 3: Mathematical Operations

a = np.random.randint(1, 20, size=5)
b = np.random.randint(1, 20, size=5)
print(a)
print(b)

print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(np.dot(a, b))
print(np.mean(a))
print(np.std(a))
print(np.var(a))
print(np.median(a))
print(np.min(a), np.argmin(a))
print(np.max(a), np.argmax(a))

# [10 17  4  6 11]
# [10 11 19  9 10]
# [20 28 23 15 21]
# [  0   6 -15  -3   1]
# [100 187  76  54 110]
# [1.         1.54545455 0.21052632 0.66666667 1.1       ]
# 527
# 9.6
# 4.498888751680798
# 20.240000000000002
# 10.0
# 4 2
# 17 1

# Task 4: Reshaping and Transposing

arr = np.arange(1, 13)
print(arr)
# [ 1  2  3  4  5  6  7  8  9 10 11 12]

d2 = arr.reshape(4, 3)
print(d2)
# [[ 1  2  3]
#  [ 4  5  6]
#  [ 7  8  9]
#  [10 11 12]]

d3 = arr.reshape(2, 2, 3)
print(d3)
# [[[ 1  2  3]
#   [ 4  5  6]]

#  [[ 7  8  9]
#   [10 11 12]]]

d2_t = d2.T
print(d2_t, d2_t.shape)
# [[ 1  4  7 10]
#  [ 2  5  8 11]
#  [ 3  6  9 12]] (3, 4)

# Task 5: Boolean Masking and Filtering

arr = np.random.randint(10, 51, size=15)
print(arr)
# [46 33 19 35 11 40 49 48 47 39 35 15 23 13 46]

print(arr[arr > 25])
# [46 33 35 40 49 48 47 39 35 46]

arr[arr < 30] = 0
print(arr)
# [46 33  0 35  0 40 49 48 47 39 35  0  0  0 46]

print(np.sum(arr % 5 == 0))
# 8

# Task 6: Built-in Functions

arr = np.linspace(0, 1, 10)
print(arr)
# [0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556
#  0.66666667 0.77777778 0.88888889 1.        ]

mat = np.eye(4)
print(mat)
# [[1. 0. 0. 0.]
#  [0. 1. 0. 0.]
#  [0. 0. 1. 0.]
#  [0. 0. 0. 1.]]

rand_arr = np.random.randint(1, 101, 20)
print(rand_arr)
# [ 5 77 11 60  4 97 78  4 88 29 12 73  2 92 54 27 31 26 85 37]

rand_arr.sort()
print(rand_arr)
# [ 2  4  4  5 11 12 26 27 29 31 37 54 60 73 77 78 85 88 92 97]

print(rand_arr[-5:])
# [78 85 88 92 97]

# Task 7: Generic

import time

arr1 = np.random.rand(100, 100)
arr2 = np.random.rand(100, 100)

start = time.time()

product = np.dot(arr1, arr2)
det = np.linalg.det(product)
inv = np.linalg.inv(product)

end = time.time()

print(product)
print(det)
print(inv)
print(f"time taken: {end - start:.6f}")

# [[26.66026325 26.53433955 28.20614855 ... 25.66015572 26.01557149
#   23.54362503]
#  [26.04920931 28.96772438 29.87652253 ... 28.28346655 27.86502264
#   23.93840628]
#  [29.77612421 31.58769902 31.74580793 ... 31.56428045 31.24432333
#   24.69171171]
#  ...
#  [26.1788981  29.10626027 29.50563025 ... 27.95721367 27.65148454
#   24.16043883]
#  [26.09987736 26.76955746 29.2422064  ... 28.85827839 27.78337929
#   22.99723931]
#  [25.43359056 25.4861124  29.81185309 ... 27.00374111 26.10347917
#   22.89364337]]
# -2.2473744863646727e+48
# [[-37.72136861  33.06647683   9.24958949 ... -13.57215942 -14.65192219
#    37.45620755]
#  [-20.4835179   17.77364096   5.07521338 ...  -6.94382695  -8.72344004
#    20.60276024]
#  [-15.65866347  14.89901794   4.76511228 ...  -5.57534388  -7.3490765
#    16.82071223]
#  ...
#  [ 26.68353509 -23.53789077  -6.50997378 ...   9.65047231  11.02861161
#   -26.45134876]
#  [ 34.67103412 -31.09752908  -8.9600242  ...  12.20387681  14.53247404
#   -35.67743059]
#  [  2.64622289  -0.46341265   0.92037627 ...   1.06753994  -1.32819464
#    -0.69001657]]
# time taken: 0.012077